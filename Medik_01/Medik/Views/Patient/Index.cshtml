@model IEnumerable<Medik.Models.Patient>

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

@* <p> *@
@* </p> *@
@* <div class="form-inline mb-3"> *@
<div class="row mb-3 justify-content-between">
    <div class="col-2">
    <a asp-action="Create" class="btn btn-primary">Create New</a>
    </div>
    <div class="col-4">
    <input type="text" id="searchInput" class="form-control mr-2" placeholder="Search by OIB, First name, or Last name" />
</div>
</div>
@* </div> *@
<div id="patientList">
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.FirstName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.LastName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Oib)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.DateOfBirth)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Gender)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.FirstName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.LastName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Oib)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.DateOfBirth)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Gender)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-info">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-warning">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-danger">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>
</div>

@section Scripts {
    <script>
        const searchInput = document.getElementById("searchInput");

        searchInput.addEventListener("input", function () {
            const searchQuery = searchInput.value;

            fetch(`/Patient/Index?search=${encodeURIComponent(searchQuery)}`, {
                method: "GET",
                headers: {
                    "X-Requested-With": "XMLHttpRequest"
                }
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error("Network response was not ok");
                    }
                    return response.text();
                })
                .then(data => {
                    const parser = new DOMParser();
                    const doc = parser.parseFromString(data, "text/html");
                    const updatedTable = doc.querySelector("table").outerHTML; // Extract updated table
                    document.querySelector("#patientList").innerHTML = updatedTable;
                })
                .catch(error => console.error("Error fetching patient data:", error));
        });
    </script>

}